use core::integer::u32;
use xgboost::inputs::input;
use orion::numbers::{FixedTrait, FP16x16};
use orion::operators::tensor::{Tensor, TensorTrait, FP16x16Tensor, U32Tensor};
use orion::operators::ml::tree_ensemble::core::{NODE_MODES, TreeEnsembleAttributes, TreeEnsemble};
use orion::operators::ml::tree_ensemble::tree_ensemble_classifier::{TreeEnsembleClassifier, POST_TRANSFORM, TreeEnsembleClassifierTrait};
use orion::operators::matrix::{MutMatrix, MutMatrixImpl};

fn main() -> u32 {
    let mut X = input();
    let class_ids: Span<usize> = array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span();
    let class_nodeids: Span<usize> = array![3, 4, 5, 9, 10, 12, 14, 15, 17, 18, 3, 4, 6, 7, 9, 11, 14, 15, 16, 2, 3, 6, 7, 9, 12, 13, 14, 3, 5, 6, 7, 10, 12, 13, 14, 2, 4, 5, 9, 10, 11, 13, 14, 3, 4, 6, 7, 10, 11, 14, 15, 16, 5, 6, 7, 8, 10, 11, 13, 14, 5, 6, 7, 8, 10, 11, 13, 14, 3, 4, 5, 7, 9, 10, 3, 4, 5, 7, 9, 10].span();
    let class_treeids: Span<usize> = array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9].span();
    let class_weights: Span<FP16x16> = array![FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19660, sign: false }, FP16x16 { mag: 32768, sign: true }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 23592, sign: true }, FP16x16 { mag: 32768, sign: false }, FP16x16 { mag: 19660, sign: false }, FP16x16 { mag: 15728, sign: true }, FP16x16 { mag: 9830, sign: false }, FP16x16 { mag: 37534, sign: false }, FP16x16 { mag: 25959, sign: false }, FP16x16 { mag: 17632, sign: true }, FP16x16 { mag: 26401, sign: true }, FP16x16 { mag: 2186, sign: true }, FP16x16 { mag: 1717, sign: true }, FP16x16 { mag: 8947, sign: false }, FP16x16 { mag: 29732, sign: false }, FP16x16 { mag: 9369, sign: false }, FP16x16 { mag: 9219, sign: false }, FP16x16 { mag: 9340, sign: false }, FP16x16 { mag: 22785, sign: true }, FP16x16 { mag: 8290, sign: false }, FP16x16 { mag: 14297, sign: true }, FP16x16 { mag: 1607, sign: false }, FP16x16 { mag: 21682, sign: false }, FP16x16 { mag: 9706, sign: true }, FP16x16 { mag: 25810, sign: false }, FP16x16 { mag: 20861, sign: false }, FP16x16 { mag: 4944, sign: false }, FP16x16 { mag: 20072, sign: true }, FP16x16 { mag: 20216, sign: true }, FP16x16 { mag: 12550, sign: true }, FP16x16 { mag: 20501, sign: false }, FP16x16 { mag: 888, sign: true }, FP16x16 { mag: 23220, sign: false }, FP16x16 { mag: 18986, sign: true }, FP16x16 { mag: 10828, sign: true }, FP16x16 { mag: 11322, sign: false }, FP16x16 { mag: 4201, sign: true }, FP16x16 { mag: 15262, sign: true }, FP16x16 { mag: 16105, sign: false }, FP16x16 { mag: 20671, sign: false }, FP16x16 { mag: 3037, sign: false }, FP16x16 { mag: 16643, sign: false }, FP16x16 { mag: 12400, sign: true }, FP16x16 { mag: 17418, sign: true }, FP16x16 { mag: 2069, sign: true }, FP16x16 { mag: 13035, sign: true }, FP16x16 { mag: 7542, sign: false }, FP16x16 { mag: 6776, sign: true }, FP16x16 { mag: 14227, sign: false }, FP16x16 { mag: 20836, sign: false }, FP16x16 { mag: 771, sign: true }, FP16x16 { mag: 17854, sign: true }, FP16x16 { mag: 6841, sign: false }, FP16x16 { mag: 18294, sign: false }, FP16x16 { mag: 16728, sign: true }, FP16x16 { mag: 504, sign: true }, FP16x16 { mag: 4224, sign: false }, FP16x16 { mag: 18842, sign: false }, FP16x16 { mag: 643, sign: true }, FP16x16 { mag: 15867, sign: true }, FP16x16 { mag: 5943, sign: false }, FP16x16 { mag: 16670, sign: false }, FP16x16 { mag: 15215, sign: true }, FP16x16 { mag: 427, sign: true }, FP16x16 { mag: 17876, sign: false }, FP16x16 { mag: 3358, sign: false }, FP16x16 { mag: 13708, sign: false }, FP16x16 { mag: 6401, sign: true }, FP16x16 { mag: 15602, sign: true }, FP16x16 { mag: 3730, sign: true }, FP16x16 { mag: 1751, sign: false }, FP16x16 { mag: 18302, sign: false }, FP16x16 { mag: 756, sign: true }, FP16x16 { mag: 15016, sign: true }, FP16x16 { mag: 5354, sign: false }, FP16x16 { mag: 4568, sign: true }, FP16x16 { mag: 4600, sign: false }, FP16x16 { mag: 17148, sign: false }].span();
    let classlabels: Span<usize> = array![0, 1].span();
    let nodes_falsenodeids: Span<usize> = array![6, 5, 4, 0, 0, 0, 16, 11, 10, 0, 0, 13, 0, 15, 0, 0, 18, 0, 0, 8, 5, 4, 0, 0, 7, 0, 0, 10, 0, 12, 0, 16, 15, 0, 0, 0, 4, 3, 0, 0, 8, 7, 0, 0, 10, 0, 14, 13, 0, 0, 0, 8, 7, 4, 0, 6, 0, 0, 0, 14, 11, 0, 13, 0, 0, 0, 6, 3, 0, 5, 0, 0, 12, 11, 10, 0, 0, 0, 14, 0, 0, 8, 5, 4, 0, 0, 7, 0, 0, 12, 11, 0, 0, 16, 15, 0, 0, 0, 12, 9, 8, 7, 6, 0, 0, 0, 0, 11, 0, 0, 14, 0, 0, 12, 9, 8, 7, 6, 0, 0, 0, 0, 11, 0, 0, 14, 0, 0, 6, 5, 4, 0, 0, 0, 8, 0, 10, 0, 0, 6, 5, 4, 0, 0, 0, 8, 0, 10, 0, 0].span();
    let nodes_featureids: Span<usize> = array![18, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 10, 0, 3, 0, 0, 18, 0, 0, 18, 1, 19, 0, 0, 19, 0, 0, 16, 0, 3, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 14, 3, 0, 0, 19, 0, 9, 3, 0, 0, 0, 18, 1, 17, 0, 16, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 14, 20, 0, 15, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0, 0, 18, 1, 19, 0, 0, 19, 0, 0, 16, 1, 0, 0, 17, 19, 0, 0, 0, 11, 0, 0, 5, 3, 0, 0, 0, 0, 19, 0, 0, 21, 0, 0, 11, 0, 0, 5, 3, 0, 0, 0, 0, 19, 0, 0, 1, 0, 0, 21, 1, 17, 0, 0, 0, 16, 0, 10, 0, 0, 20, 10, 6, 0, 0, 0, 19, 0, 21, 0, 0].span();
    let nodes_missing_value_tracks_true: Span<usize> = array![1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0].span();
    let nodes_modes: Span<NODE_MODES> = array![NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::BRANCH_LT, NODE_MODES::LEAF, NODE_MODES::LEAF].span();
    let nodes_nodeids: Span<usize> = array![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].span();
    let nodes_treeids: Span<usize> = array![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9].span();
    let nodes_truenodeids: Span<usize> = array![1, 2, 3, 0, 0, 0, 7, 8, 9, 0, 0, 12, 0, 14, 0, 0, 17, 0, 0, 1, 2, 3, 0, 0, 6, 0, 0, 9, 0, 11, 0, 13, 14, 0, 0, 0, 1, 2, 0, 0, 5, 6, 0, 0, 9, 0, 11, 12, 0, 0, 0, 1, 2, 3, 0, 5, 0, 0, 0, 9, 10, 0, 12, 0, 0, 0, 1, 2, 0, 4, 0, 0, 7, 8, 9, 0, 0, 0, 13, 0, 0, 1, 2, 3, 0, 0, 6, 0, 0, 9, 10, 0, 0, 13, 14, 0, 0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 10, 0, 0, 13, 0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 10, 0, 0, 13, 0, 0, 1, 2, 3, 0, 0, 0, 7, 0, 9, 0, 0, 1, 2, 3, 0, 0, 0, 7, 0, 9, 0, 0].span();
    let nodes_values: Span<FP16x16> = array![FP16x16 { mag: 14492, sign: false }, FP16x16 { mag: 39004, sign: false }, FP16x16 { mag: 24232, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 5681, sign: false }, FP16x16 { mag: 11271, sign: false }, FP16x16 { mag: 9461, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 4948, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 5235, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19203, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19517, sign: false }, FP16x16 { mag: 13635, sign: false }, FP16x16 { mag: 30880, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 25341, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 20817, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 3424, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 44029, sign: false }, FP16x16 { mag: 61197, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 14492, sign: false }, FP16x16 { mag: 39004, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 862, sign: false }, FP16x16 { mag: 3591, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19461, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 5681, sign: false }, FP16x16 { mag: 7359, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19517, sign: false }, FP16x16 { mag: 16994, sign: false }, FP16x16 { mag: 40233, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 23245, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 5681, sign: false }, FP16x16 { mag: 11330, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 34241, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 877, sign: false }, FP16x16 { mag: 18550, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 47950, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 23710, sign: false }, FP16x16 { mag: 29714, sign: false }, FP16x16 { mag: 28684, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 40810, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 19517, sign: false }, FP16x16 { mag: 13635, sign: false }, FP16x16 { mag: 30880, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 25177, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 22979, sign: false }, FP16x16 { mag: 7361, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 23710, sign: false }, FP16x16 { mag: 29663, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 6695, sign: false }, FP16x16 { mag: 39406, sign: false }, FP16x16 { mag: 17091, sign: false }, FP16x16 { mag: 3472, sign: false }, FP16x16 { mag: 3736, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 25647, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 15781, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 6695, sign: false }, FP16x16 { mag: 39406, sign: false }, FP16x16 { mag: 17091, sign: false }, FP16x16 { mag: 3472, sign: false }, FP16x16 { mag: 3736, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 25647, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 16656, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 14333, sign: false }, FP16x16 { mag: 16994, sign: false }, FP16x16 { mag: 40233, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 24079, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 4600, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 22622, sign: false }, FP16x16 { mag: 6304, sign: false }, FP16x16 { mag: 3301, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 24587, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 14333, sign: false }, FP16x16 { mag: 0, sign: false }, FP16x16 { mag: 0, sign: false }].span();
    let base_values: Option<Span<FP16x16>> = Option::None;
    let post_transform = POST_TRANSFORM::SOFTMAX;

    let tree_ids: Span<usize> = array![0, 1, 2, 3, 4, 5, 6, 7, 8, 9].span();
let mut root_index: Felt252Dict<usize> = Default::default();
    root_index.insert(0, 0);
    root_index.insert(1, 19);
    root_index.insert(2, 36);
    root_index.insert(3, 51);
    root_index.insert(4, 66);
    root_index.insert(5, 81);
    root_index.insert(6, 98);
    root_index.insert(7, 113);
    root_index.insert(8, 128);
    root_index.insert(9, 139);
let mut node_index: Felt252Dict<usize> = Default::default();
    node_index.insert(2089986280348253421170679821480865132823066470938446095505822317253594081284, 0);
    node_index.insert(2001140082530619239661729809084578298299223810202097622761632384561112390979, 1);
    node_index.insert(2592670241084192212354027440049085852792506518781954896144296316131790403900, 2);
    node_index.insert(2960591271376829378356567803618548672034867345123727178628869426548453833420, 3);
    node_index.insert(458933264452572171106695256465341160654132084710250671055261382009315664425, 4);
    node_index.insert(3344223123784052057366048933846905716067140384361791026153972616805110454637, 5);
    node_index.insert(658476905110174425295568215706634733332002869979287079110965040248935650599, 6);
    node_index.insert(2836212335642438363012490794290757623813171043187182819737087983331902926990, 7);
    node_index.insert(3496601277869056110810900082189273917786762659443522403285387602989271154262, 8);
    node_index.insert(1249294489531540970169611621067106471309281870082955806338234725206665112557, 9);
    node_index.insert(2161697998033672097816961828039488190903838124365465380011173778905747857792, 10);
    node_index.insert(1129815197211541481934112806673325772687763881719835256646064516195041515616, 11);
    node_index.insert(2592593088135949192377729543480191336537305484235681164569491942155715064163, 12);
    node_index.insert(578223957014284909949571568465953382377214912750427143720957054706073492593, 13);
    node_index.insert(1645617302026197421098102802983206579163506957138012501615708926120228167528, 14);
    node_index.insert(2809438816810155970395166036110536928593305127049404137239671320081144123490, 15);
    node_index.insert(2496308528011391755709310159103918074725328650411689040761791240500618770096, 16);
    node_index.insert(2003594778587446957576114348312422277631766150749194167061999666337236425714, 17);
    node_index.insert(2215681478480673835576618830034726157921200517935329010004363713426342305479, 18);
    node_index.insert(1089549915800264549621536909767699778745926517555586332772759280702396009108, 19);
    node_index.insert(1321142004022994845681377299801403567378503530250467610343381590909832171180, 20);
    node_index.insert(2592987851775965742543459319508348457290966253241455514226127639100457844774, 21);
    node_index.insert(2492755623019086109032247218615964389726368532160653497039005814484393419348, 22);
    node_index.insert(1323616023845704258113538348000047149470450086307731200728039607710316625916, 23);
    node_index.insert(2602806075100213744247558189988576480101725415744802768676593239465413062437, 24);
    node_index.insert(2133001354671050566009032930947037407966162226953928247738970920578517401509, 25);
    node_index.insert(2028511445532887286219926414461404880922973379000283365640739306412060589984, 26);
    node_index.insert(2172916877564771226634785492487495706550975402295255580723040851110825214452, 27);
    node_index.insert(443365385840578145598469834664300070798229423724186017253666927387247171605, 28);
    node_index.insert(729855921817393983434977875314769926547493289803739783677327742608094432090, 29);
    node_index.insert(1914743748046569081169775800674968385592598418967909792072913293994383786914, 30);
    node_index.insert(1905186476891772648228095881141294869145589945808189361436653544018360062058, 31);
    node_index.insert(3478750059048257206950245886704031215117884591408631705246789143235927594297, 32);
    node_index.insert(1360650719458388540862313348610603767210254471680075689691583578268553163977, 33);
    node_index.insert(2835713808086902981032735997270657320272844799255056915522524373324489601373, 34);
    node_index.insert(2986663520528822735284621823964735413577139476770655672122727824709194687603, 35);
    node_index.insert(1637368371864026355245122316446106576874611007407245016652355316950184561542, 36);
    node_index.insert(1207699383798263883125605407307435965808923448511613904826718551574712750645, 37);
    node_index.insert(1180550645873507273865212362837104046225859416703538577277065670066180087996, 38);
    node_index.insert(2472368796876167851123807933892689310864199328863324614163271115835436643256, 39);
    node_index.insert(2178161520066714737684323463974044933282313051386084149915030950231093462467, 40);
    node_index.insert(3173857952392006478115535740648337122591944728347430823115535852278920741329, 41);
    node_index.insert(3520866866675103377451014823284046708949378458998098483918774175589256898262, 42);
    node_index.insert(2177941723204159354958359305495360053392108189585761207084264896971635476845, 43);
    node_index.insert(2864394597864040652203681823189877789250870157950998029096571449554775379175, 44);
    node_index.insert(2897433825911865985719211501544370326016492217831301730855907643627594369342, 45);
    node_index.insert(859854829566932180582991726609554142743294771126929508994399727707123524911, 46);
    node_index.insert(3340556370013659658837668538361919723611956717010849115344219019131584232987, 47);
    node_index.insert(969684220953017614408764005228364528747533427394672852952823310808481653043, 48);
    node_index.insert(2517958524955101484176646974264278027523630430782643866142783043852607952501, 49);
    node_index.insert(3562411576101596305100373214898963557357005221009821819112293537238776158186, 50);
    node_index.insert(936823097115478672163131070534991867793647843312823827742596382032679996195, 51);
    node_index.insert(2908682032041418908903105681227249033483541201006723240850136728317167492227, 52);
    node_index.insert(576657123605396437968823113955952586959670965011232700393892413073919304299, 53);
    node_index.insert(1481896535808584724908081559736405324517902569915916348692801954386091870245, 54);
    node_index.insert(1078504723311822443900992338775481548059850561756203702548080974952533155775, 55);
    node_index.insert(3600002659897393349182084561058064793711202886846821609483133344058737149025, 56);
    node_index.insert(3368719563563263866230472954713864957694379602883426421349849633317984059809, 57);
    node_index.insert(3061985788110370164702870586311819183603331041211221464100695473643557007437, 58);
    node_index.insert(2457099323156468926195938030605866764815394034211788952682350929421057342674, 59);
    node_index.insert(2957842788546916169046256209697117030459247586361719671122517787383587849165, 60);
    node_index.insert(2312904897276702323312886413034958954274798496010131800578489850623882072366, 61);
    node_index.insert(2151530441654757675731379578805793696168111600993272271717851052954293636901, 62);
    node_index.insert(2104364994557927682520946967259590209035689080176497654779930510810046951574, 63);
    node_index.insert(3199488041090936489363178144929027873872059450647899792781514666347387729515, 64);
    node_index.insert(3003392184156862687155729961085723294905891707023296976854703666526389243546, 65);
    node_index.insert(469486474782544164430568959439120883383782181399389907385047779197726806430, 66);
    node_index.insert(3512521406437956009189089258567111789473785799907488469636118378769715425964, 67);
    node_index.insert(2556139128341700567231916301725351155453738182692001295135848448652163014397, 68);
    node_index.insert(3465043718230761803333064436233095750064993904445202331528878419074385927073, 69);
    node_index.insert(1484044891644535909221789528912343377988032083750620401102632587429863384003, 70);
    node_index.insert(2461928659912411191191030223391335469157788575464844862110246923127701977319, 71);
    node_index.insert(2281242043976231097131811306819088407938037212974538659998798361039396044155, 72);
    node_index.insert(3401905887745651121992197760975218515746916177849269185510226539905893010873, 73);
    node_index.insert(3598997708465887406346585735116498533400367718313911603017854078295775741724, 74);
    node_index.insert(3333324623402098338894983297253618187074385014448599840723759915876610845540, 75);
    node_index.insert(2252912169951643482977397680420757893646357174664273028264360445856571205254, 76);
    node_index.insert(2897766199550857496661339086497252536035518270841738435573089042896012812921, 77);
    node_index.insert(954287973496925640659330696971147042810006270938574818198760963073154507812, 78);
    node_index.insert(2876279218474209466275302645002734284339699883191492579155580470406630859926, 79);
    node_index.insert(1848190041985692961829962406152782269559956645511776235582075116890880719484, 80);
    node_index.insert(2941083907689010536497253969578701440794094793277200004061830176674600429738, 81);
    node_index.insert(3515557115945123685249720924176918246289668839127088842764552624387741006658, 82);
    node_index.insert(1086529665842980980708131000626441572702884934518178946087373814825190924452, 83);
    node_index.insert(1577600695648543593850511011274446155472648910099879524512420959593356117933, 84);
    node_index.insert(369637003681923374235868884090690746347960427214527191195034764982555476019, 85);
    node_index.insert(3125779721945763288433380755626503099347902113189413000518025153445630158401, 86);
    node_index.insert(887847247223813684398612989470912626224213579404697697378648600264021898263, 87);
    node_index.insert(16619444747250762036595255150391108469240603040189807430655609336266920022, 88);
    node_index.insert(2628075195767292674590700502403560116319020921182344709587066307456648985625, 89);
    node_index.insert(2438502160866250745334110983854834216010319001088729328948569151470890138896, 90);
    node_index.insert(3295369764201403697020931568280448079372569883207512770197546917303872097494, 91);
    node_index.insert(2800494936737086207139723655044366722420138476182528385634707980262139812406, 92);
    node_index.insert(3132606217959475072121780021316596349712964739992677349194234125743516464040, 93);
    node_index.insert(656021941148415165431333659891582324769158567011100828420172665422894153586, 94);
    node_index.insert(502703338856261709292864170013545966845935535351074954483261434537992997511, 95);
    node_index.insert(73512124624850034004821169525490264470298981460850014453376484774048511459, 96);
    node_index.insert(1392730751941015904834170795863393469166319919808784999782168001951603553895, 97);
    node_index.insert(2741690337285522037147443857948052150995543108052651970979313688522374979162, 98);
    node_index.insert(2650761223990278311391161549562769924185646525933398576366599729646470331982, 99);
    node_index.insert(2394106477146207452133044987332160354989937730594050309156799249985649638789, 100);
    node_index.insert(3221546555590725210494412430124213369510944559726456557849915592640050076870, 101);
    node_index.insert(2228295198404333119017490955293049364627235124737441027193226305830899856739, 102);
    node_index.insert(1500728334208813541595897459030132460053541518563429199208970697149622864812, 103);
    node_index.insert(3370962038708719437204954491911331590397946488012391643100034534008512344333, 104);
    node_index.insert(1316763448112859394321117487731514423037681243887874196205047698610445360084, 105);
    node_index.insert(2675592129551529371290790685310559984125358643115246876322043698639381749698, 106);
    node_index.insert(1528859248215310863238401709462632347578470922545446103095571132030945850144, 107);
    node_index.insert(3611690624124252450410480577094491432815522006798435310057357000073481753133, 108);
    node_index.insert(1439036764276032966983559284365334079695374463347000527220102853724684269113, 109);
    node_index.insert(1258410373276784381071702787851529424400817190522556443076585835045523985589, 110);
    node_index.insert(3159488699709692726987767167803380927365063049737489808755263770463033523780, 111);
    node_index.insert(2807310041875874050147290560038271475334414983815271892746689403530695500639, 112);
    node_index.insert(2258442912665439649622769515993460039756024697697714582745734598954638194578, 113);
    node_index.insert(1923650700608380821616803627552990459031020321822263486178231314533355655733, 114);
    node_index.insert(2986518118017342969503780420947472437589402926077471462482848861272477228312, 115);
    node_index.insert(1376854647019374078119330239267360951409489379782091263003138693189186942360, 116);
    node_index.insert(198240730684500640150208378390372236261578668680828477399089686184533568077, 117);
    node_index.insert(3462170494890148756353920888438422951629558416957219731886326073485272303293, 118);
    node_index.insert(1962794787101716104704617632188042176559313722630142376738121901804294635479, 119);
    node_index.insert(3543658181354415484267558193752745016120695110457258324241772949957846692556, 120);
    node_index.insert(1639567931862120316944501436886260401899290029152657621735471556017756287204, 121);
    node_index.insert(276906115036898363431472532063384799380588502189246195108179244619398122573, 122);
    node_index.insert(1688612378535896419145639370974516556754354024426334119285417929602809421417, 123);
    node_index.insert(1900856742887961294860606452087091565433946615340998932505585217008260199284, 124);
    node_index.insert(1994745673146063672704507741257916438992320779247322518848114182956855338846, 125);
    node_index.insert(317732098116912916426803629956464630867739016177287564523762567707556048388, 126);
    node_index.insert(183185162744998483916279696539633272281960879494855355809410691079920617538, 127);
    node_index.insert(2743794648056839147566190792738700325779538550063233531691573479295033948774, 128);
    node_index.insert(2798268708043007987823290469469057887013592827991152425130480624165644530309, 129);
    node_index.insert(2656358495835759095543325181783754425097697418395968068218877742551382200798, 130);
    node_index.insert(1211642483429689718997906629094690895255021115365864106699680729506720772533, 131);
    node_index.insert(520077409223118195244629881107208371526219124916445328459593670003268088063, 132);
    node_index.insert(93985644132730505486074702539148551671332749940268672423984409734307038826, 133);
    node_index.insert(2165844361114289378140427479321032111399124460609987951006934492648782910662, 134);
    node_index.insert(2322493943028454082867530691966858982742310990292470419212790347747179778297, 135);
    node_index.insert(2615908339515304696322917477778214017890419528057651553511868145338556814263, 136);
    node_index.insert(3150582236998249277321327935386244867490444511574699521838653176378560421177, 137);
    node_index.insert(1103107773728853098047857302297018053744966397454215685594269601931897173813, 138);
    node_index.insert(3149011590233272225803080114059308917528748800879621812239443987136907759492, 139);
    node_index.insert(1256253793249097778491586851395915710675714820964284887367516531463100834885, 140);
    node_index.insert(1367204028253064270272780398308197116331885826019160095546179574252301715156, 141);
    node_index.insert(35709238200630692715748986686945022954166018904577236782775928014549886022, 142);
    node_index.insert(1690135278907791721896273394500395617659804632461123206580263779149876929936, 143);
    node_index.insert(1340132720132606529304051489452456388877819458544295234058225753095208751193, 144);
    node_index.insert(3331101506676960306951459794126508483786181208250673671253397539513072458132, 145);
    node_index.insert(1968553031355756394708825093080871390157767243580480628290817791233056157107, 146);
    node_index.insert(53599261528661835152933160922762096660579017344453806771249603226050907848, 147);
    node_index.insert(188933663081214911444249635018177278663387625374691125466377969902713019621, 148);
    node_index.insert(317905895434545767284255767413356462762189087386136460253482303190436587218, 149);

    let atts = TreeEnsembleAttributes {
        nodes_falsenodeids,
        nodes_featureids,
        nodes_missing_value_tracks_true,
        nodes_modes,
        nodes_nodeids,
        nodes_treeids,
        nodes_truenodeids,
        nodes_values
    };

    let mut ensemble: TreeEnsemble<FP16x16> = TreeEnsemble {
        atts, tree_ids, root_index, node_index
    };

    let mut classifier: TreeEnsembleClassifier<FP16x16> = TreeEnsembleClassifier {
        ensemble,
        class_ids,
        class_nodeids,
        class_treeids,
        class_weights,
        classlabels,
        base_values,
        post_transform
    };

    let (labels, mut scores) = TreeEnsembleClassifierTrait::predict(ref classifier, X);
    let mut arr: Span<usize> = labels;
    let a: usize = *arr.pop_front().unwrap();
    a
}